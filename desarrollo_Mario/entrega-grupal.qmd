---
title: "Entrega grupal"
author: "C. Tangana (DNI: 00000000-X), Rosalía (DNI: 00000000-X), ..."
format:
  html:
    theme: [style.scss]
    toc: true
    toc-location: right
    toc-title: Índice
editor: visual
---

## Instrucciones (leer antes de empezar)

-   Modificad dentro del documento `.qmd` vuestros datos personales (nombres y DNI) ubicados en la cabecera del archivo.

-   Aseguraos, **ANTES de seguir editando** el documento, que el archivo `.qmd` se renderiza correctamente y se genera el `.html` correspondiente en tu carpeta local de tu ordenador.

-   Los chunks (cajas de código) creados están o vacíos o incompletos. Una vez que editeis lo que consideres, debeis ir cambiando cada chunck a `#| eval: true` (o quitarlo directamente) para que se ejecuten.

-   Recordad que puedes ejecutar chunk a chunk con el botón *play* o ejecutar todos los chunk hasta uno dado (con el botón a la izquierda del anterior).

### Paquetes necesarios

> Introduce en el chunk inferior los paquetes que vayas a necesitar

```{r paquetes}
rm(list = ls()) # Borramos variables de environment
#Cargar librerias 
library(tidyverse)
library(stringi)
library(lubridate)
library(glue)
library(ggthemes)
library(showtext)
library(ggridges)
library(ggsci)
library(dplyr)
library(scales)
```

## Práctica grupal

### Datos

La práctica versará entorno a los **archivos de datos electorales** que ya hemos trabajado, recopilando datos de citas electorales al Congreso de los Diputados de España desde 2008 hasta la actualidad

```{r}
# NO TOQUES NADA
datos_elecciones <- read_csv(file = "./datos/datos_elecciones_brutos.csv")
cod_mun <- read_csv(file = "./datos/cod_mun.csv")
encuestas <- read_csv(file = "./datos/historical_surveys.csv")
siglas <- read_csv(file = "./datos/siglas.csv")
```

Los datos serán los siguientes:

-   `datos_elecciones`: archivo con los datos electorales al Congreso desde 2008 hasta las últimas de 2019.

    -   `tipo_eleccion`: tipo de elección (02 si es elección al congreso)
    -   `anno`, `mes`: año y mes de las elecciones
    -   `vuelta`: vuelta electoral (1 si es primera vuelta)
    -   `codigo_ccaa, codigo_provincia, codigo_municipio, codigo_distrito_electoral`: código de la ccaa, provincia, municipio y distrito electoral.
    -   `numero_mesas`: número de mesas electorales
    -   `censo`: censo electoral
    -   `participacion_1, participacion_2`: participación en el primer avance (14:00) y segundo avance (18:00) antes del cierre de urnas (20:00)
    -   `votos_blancos`: votos en blanco
    -   `votos_candidaturas`: votos a papeletas de partidos
    -   `votos_nulos`: votos nulos
    -   votos recibidos por cada uno de los partidos

-   `cod_mun`: archivo con los códigos y nombres de cada municipio

-   `siglas`: siglas y nombres asociados a cada partido

-   `encuestas`: tabla de encuestas electorales desde 1982. Algunas de las variables son las siguientes:

    -   `type_survey`: tipo de encuesta (nacional, autonómica, etc)
    -   `date_elec`: fecha de las futuras elecciones
    -   `id_pollster`, `pollster`, `media`: identificador y nombre de la casa encuestadora, así como el medio que lo haya encargado
    -   `field_date_from`, `field_date_to`: fecha de inicio y final del trabajo de campo
    -   `exit_poll`: si se trata de una encuesta a pie de urna o no
    -   `size`: tamaño muestral
    -   `turnout`: estimación de la participación
    -   estimación de intención de voto para los principales partidos

### Objetivos e ítems obligatorios.

El objetivo de la entrega es realizar un análisis de los datos electorales, llevando a cabo la depuración, resúmenes y gráficos que consideres, tanto de sus resultaados como del acierto de las encuestas electorales.

En concreto **se deberá trabajar solo en la ventana temporal que comprenden las elecciones desde 2008 hasta las últimas elecciones de 2019**.

#### Indicaciones generales

Amén de lo que te parezca oportuno ejecutar, serán obligatorios los siguientes ítems:

-   Cada grupo deberá presentar **al menos 48 horas antes un análisis de los datos** en formato `.qmd` y `.html` en modo **diapositivas**, que **serán las que expongan el día de la presentación**.

-   Durante la presentación se **explicará el análisis realizado** de manera que **cada miembro del equipo habla un tiempo similar** y **cada miembro podrá ser preguntado por cualquiera de los pasos**. La nota no tendrá porque ser la misma para todos/as los/as integrantes.

-   Se valorará no solo el contenido sino el continente (estética).

-   Se valorará positivamente que las diapositivas estén alojadas en Github.

-   El objetivo es demostrar que se adquirido el máximo de conocimientos del curso: cuantas más contenido del temario se incluya, mejor.

#### Ítems obligatorios:

-   Se deberá de **convertir los datos a tidydata** cuando proceda.

-   Se deberá **incluir al menos un cruce (join)** entre tablas.

-   Reminder: información = varianza, así que se deberán **retirar columnas que no nos van a aportar nada**.

-   Se deberá usar el **paquete glue y lubridate** en algún momento, así como el paquete **forcats**, **ggplot2** y **plotly**

-   Se deberá usar al menos una vez lo siguiente:

    -   mutate
    -   summarise
    -   group_by (o equivalente)
    -   case_when

-   Tenemos muchísimos partidos que se presentan a las elecciones. Solo nos intereserán los siguientes partidos:

    -   PARTIDO SOCIALISTA OBRERO ESPAÑOL (cuidado: tiene/tuvo federaciones - sucursales - con algún otro nombre)
    -   PARTIDO POPULAR
    -   CIUDADANOS (cuidado: tiene/tuvo federaciones - sucursales - con algún otro nombre)
    -   PARTIDO NACIONALISTA VASCO
    -   BLOQUE NACIONALISTA GALEGO
    -   COMPROMÍS
    -   CONVERGÈNCIA I UNIÓ
    -   UNIDAS PODEMOS - IU (cuidado que aquí han tenido nombres variados - IU, los verdes, podem, ezker batua, ...- y no siempre han ido juntos, pero aquí los analizaremos juntos
    -   ESQUERRA REPUBLICANA DE CATALUNYA
    -   EH - BILDU (son ahora una coalición de partidos formados por Sortu, Eusko Alkartasuna, Aralar, Alternatiba)
    -   MÁS PAÍS
    -   VOX7\*

-   Todo lo que no sea alguno de los anteriores partidos deberá ser imputado como "OTROS". Recuerda agregar los datos tras la recodificación anterior.

-   Para las visualizaciones se usarán las siglas de los partidos. El trabajo deberá contener al menos 5 gráficas, de las cuales al menos 3 deben ser tipos de gráficos distintos (ver <https://r-graph-gallery.com/>), todas ellas con un tema personalizado

-   Deberás usar los 4 archivos de datos en algún momento

-   Deberás definir al menos una función propia (que no sea trivial)

-   Deberás descartar obligatoriamente las encuestas que:

    -   hagan referencia a elecciones anteriores a 2008
    -   que sean a pie de urna
    -   que tenga un tamaño muestral inferior a 750 o que sea desconocido
    -   que tengan menos de 1 o menos días de trabajo de campo

-   Deberás responder obligatoriamente a las siguientes preguntas (más las que consideres analizar para distinguirte del resto de equipos, ya sea numérica y/o gráficamente, pudiendo responder con números y/o con gráficos, decidiendo la mejor visualización que consideres.)

    -   ¿Cómo se reparte el voto de partidos de ámbito nacional (PSOE, PP, VOX, CS, MP, UP - IU) frente a los partidos de corte autonómico o nacionalista?
    -   ¿Cuál el partido ganador en los municipios de más de 100 000 habitantes de censo en cada una de las elecciones?
    -   ¿Qué partido fue el segundo cuando el primero fue el PSOE? ¿Y cuándo el primero fue el PP?
    -   ¿En qué municipios de más 2000 habitantes de censo, provincias o autonomías la diferencia entre el ganador y el segundo es más elevada?
    -   ¿Cuáles son los municipios con mayor porcentaje de votos nulos de España?
    -   ¿En qué sitios hay mayor participación? ¿Quién ganó en los sitios con mayor participación y donde menos? ¿A quién le beneficia la baja participación?
    -   ¿Cómo analizar la relación entre censo y voto? ¿Es cierto que ciertos partidos ganan lo rural?
    -   ¿Cómo calibrar el error de las encuestas? ¿Cómo visualizarlo? (recuerda que las encuestas son intención de voto a nivel nacional)
    -   ¿En qué elección se equivocaron más las encuestas?
    -   ¿Cómo se equivocaron las encuestas en partidos de ámbito nacional (PSOE, PP, VOX, CS, MP, UP - IU)
    -   ¿Qué casas encuestadores acertaron más y cuales se desviaron más de los resultados?

#### Calificación

**No se valorará más al que más cosas haga**. Más no siempre es mejor. Se valorará la **originalidad** (respecto al resto de trabajos, por ejemplo en lo analizado o en el tema o ...) de lo planteado, tanto en manejo de tablas como en visualización, el **cariño** puesto en la entrega (el cariño en la vida es importante) y la **pertinencia** de lo realizado. Una vez que tengáis los ítems obligatorios con tu base de datos más o menos completada, **piensa antes** de ponerte a picar código: ¿qué puede ser interesante? ¿Qué necesito para poder obtener un resumen tanto numérico tanto visual?

Recordad que el fin real es demostrarme un dominio de las herramientas vistas a lo largo del curso. Y eso pasa no solo por la cantidad de ellas utilizadas sino por la calidad al ejecutarlas.

## Desarrollo

La base de datos "datos_elecciones" original es un tible de 48.737x471 lo que impide su comprensión para un correcto análisis de datos.

```{r}
datos_elecciones
```

Se considera que es mejor tener una columna con todos los partidos políticos y otra con el número de votos de cada uno en cada municipio en cada una de las elecciones registradas. Además se procederá a eliminar los valores NA, ya que estos registros hacen referencia a partidos que no han recibido votos en esas elecciones y no aportan información. --\> ToDo: hacer demostración de summary(datos\$votos) para ver que el mínimo es 1 y confirmar que NA es que no ha recibido votos, y que no hay distinción entre NA y 0.

Como paso previo se considera eliminar aquellas columnas que no aporten información, es decir, todas aquellas que tengan un único valor.

```{r}
#| results: hold
cols_sin_informacion <- datos_elecciones |> select(1:15) |>
  summarise(across(everything(), n_distinct)) |> pivot_longer(cols = everything()) |> 
  filter(value==1) |> select(name) |> pull()

datos_elecciones %>% select(all_of(cols_sin_informacion)) %>% summary() # esto decidir si ponerlo, por si pregunta cómo hemos sacado en el comentario de abajo que son esos valores

datos_elecciones <- datos_elecciones |> select(-all_of(cols_sin_informacion))
```

Se eliminan las columnas: `r cols_sin_informacion`.

-   *tipo_eleccion*: valor constante 02.

-   *codigo_distrito_electoral*: valor constante 0.

-   *vuelta*: valor constante 1.

Obteniendo como resultado un tibble de 396735*17, es decir, con menos columnas y más filas que los datos originales.

```{r}
datos_elecciones <- datos_elecciones |>
  pivot_longer(cols = -c(anno:votos_candidaturas),
               names_to = "partido_politico",
               values_to = "votos") |>
  drop_na(votos) 
```

Se crea una nueva columna llamada "fecha" utilizando las columnas "anno" y "mes" mediante la función **`glue`** y una nueva "id_mun" la cual permitire unir las dos bases de datos "cod_mun". Se eliminan las columnas "*anno, mes, codigo_ccaa, codigo_provincia, codigo_municipio"* dado que se han creado nuevas variables con estos datos.

::: {.callout-warning}
Pulir bien el mutate del formato fecha con `lubridate`.
:::


```{r}
datos_elecciones <- datos_elecciones |>
  mutate(fecha=glue("{anno}-{mes}"),
         cod_mun=glue("{codigo_ccaa}-{codigo_provincia}-{codigo_municipio}"),
         .before = "numero_mesas") |> 
  select(-c(anno, mes, codigo_ccaa, codigo_provincia, codigo_municipio))
```
  
  
Unimos las tablas datos_elecciones y cod_min a fin de que en la base final aparezca el nombre de los municipios.

```{r}
datos_elecciones <- datos_elecciones |> inner_join(cod_mun, by = "cod_mun") # recolocate after cod_mun?
```

En la base de datos "siglas" se normalizan las siglas de los partidos políticos. Por ejemplo, se asignando a tres denominaciones de Convergència i Unió unas únicas siglas para unificar la información de este partido.

```{r}
siglas |>
  filter(str_detect(str_to_lower(denominacion), "^conver.*uni|^conver.*cata")) |> 
  distinct() |> 
  mutate(siglas_new = "CiU")
```

Así, se realiza la siguiente recodificación para unificar las denominaciones de los partidos:

```{r}
siglas <- siglas |> 
  mutate(siglas=case_when(str_detect(str_to_lower(denominacion), ".*part.*popul|pp") ~ "PP",
                          # P.P-E.U. nos interesa como PP
                          # listas conjuntas con el Partido Popular en las elecciones municipales y autonómicas de 2007
                          # en las elecciones generales de 2011 se presentó en coalición con el Partido Popular
                          str_detect(str_to_lower(denominacion), "^part.*socialist|^socialist.*teruel") ~ "PSOE",
                          str_detect(str_to_lower(denominacion), "^ciudadanos.*partido|^ciutadans") ~ "C's",
                          str_detect(str_to_lower(denominacion), "vasco") ~ "PNV",
                          str_detect(str_to_lower(siglas), "bng") ~ "BNG",
                          str_detect(str_to_lower(siglas), "comprom") &
                            !str_detect(siglas,"^0-9")~ "COMPROMÍS", # para evitar COMPROMÍS 2
                          str_detect(str_to_lower(denominacion), "^conver.*uni|^conver.*cata") ~ "CiU",
                          # El 19 de septiembre de 1978 [Convergencia Democrática de Cataluña] se coalizó con Unió Democràtica de Catalunya
                          # El 18 de junio de 2015 Convergència Democràtica de Catalunya anunció el fin de Convergència i Unió 
                          str_detect(str_to_upper(denominacion), "VERDES|PODEM|EZKER|COMUNISTA|ZQUIERDA REPUBLICANA
                                     |VERDS|IZQUIERDA UNIDA|EN MAREA|UNIDAD POPULAR|EQUO") & # importante que el | esté en esta línea y no al final de la anterior
                            !str_detect(str_to_upper(stringi::stri_trans_general(denominacion, id = "Latin-ASCII")), "MAS PAIS") ~ "UP",
                          str_detect(str_to_lower(siglas), "erc") |
                            str_detect(tolower(denominacion), "esquerra republicana") ~ "ERC",
                          # FRONT PEL PAIS VALENCIA-ERC --> ERC
                          # https://www.vilaweb.cat/noticia/1142933/20000710/front-pais-valencia-fusionara-erc.pdf
                          str_detect(str_to_upper(denominacion), "EH|EUSKO|ARALAR") | 
                            str_detect(str_to_upper(siglas), "EH|EUSKO|ARALAR")~ "EH - BILDU",
                          str_detect(str_to_upper(stringi::stri_trans_general(denominacion, id = "Latin-ASCII")), "MAS PAIS") ~ "MÁS PAÍS",
                          str_detect(str_to_upper(denominacion), "VOX") ~ "VOX",
                          TRUE ~ "Otros"),
         .after = denominacion)

siglas <- siglas %>% select(denominacion, siglas) %>% distinct()
```

Se procede a añadir las siglas de los partidos a la tabla de datos_encuestas (que incluye información de cod_mun). Nota de Mario: datos_encuestas no sé de dónde sale, nota de Mario: by=denominacion no sé cómo es, denominación solo está en una tabla nota de mario: si haces un inner join te quedas sin los datos.

:::{.callout-warning}
Revisar el `Warning: Detected an unexpected many-to-many`.
:::

```{r}
#| eval: false
datos_elecciones_siglas <- datos_elecciones |>
  inner_join(siglas, by = "denominacion") |> 
  relocate(siglas, .before = denominacion)
```

```{r}
datos_elecciones_siglas <- datos_elecciones |>
  left_join(siglas, by = c("partido_politico" = "denominacion")) |> 
  relocate(siglas, .before = partido_politico)
```

::: {.callout-tip}
## Mario

EXPLICAR TODO EL POR QUÉ NO NOS SIRVE SIGLAS (lo que hablamos en la reu)
:::


```{r}
datos_elecciones <- datos_elecciones |> 
  mutate(siglas=case_when(str_detect(str_to_lower(partido_politico), ".*part.*popul|pp") ~ "PP",
                          # P.P-E.U. nos interesa como PP
                          # listas conjuntas con el Partido Popular en las elecciones municipales y autonómicas de 2007
                          # en las elecciones generales de 2011 se presentó en coalición con el Partido Popular
                          str_detect(str_to_lower(partido_politico), "^part.*socialist|^socialist.*teruel") ~ "PSOE",
                          str_detect(str_to_lower(partido_politico), "^ciudadanos.*partido|^ciutadans") ~ "C's",
                          str_detect(str_to_lower(partido_politico), "vasco") ~ "PNV",
                          str_detect(str_to_lower(partido_politico), "galego") ~ "BNG",
                          str_detect(str_to_lower(partido_politico), "comprom") &
                            !str_detect(partido_politico,"^0-9")~ "COMPROMÍS", # para evitar COMPROMÍS 2
                          str_detect(str_to_lower(partido_politico), "^conver.*uni|^conver.*cata") ~ "CiU",
                          # El 19 de septiembre de 1978 [Convergencia Democrática de Cataluña] se coalizó con Unió Democràtica de Catalunya
                          # El 18 de junio de 2015 Convergència Democràtica de Catalunya anunció el fin de Convergència i Unió 
                          str_detect(str_to_upper(partido_politico), "VERDES|PODEM|EZKER|COMUNISTA|ZQUIERDA REPUBLICANA
                                     |VERDS|IZQUIERDA UNIDA|EN MAREA|UNIDAD POPULAR|EQUO") & # importante que el | esté en esta línea y no al final de la anterior
                            !str_detect(str_to_upper(stringi::stri_trans_general(partido_politico, id = "Latin-ASCII")), "MAS PAIS") ~ "UP",
                          str_detect(str_to_lower(partido_politico), "erc") |
                            str_detect(tolower(partido_politico), "esquerra republicana") ~ "ERC",
                          # FRONT PEL PAIS VALENCIA-ERC --> ERC
                          # https://www.vilaweb.cat/noticia/1142933/20000710/front-pais-valencia-fusionara-erc.pdf
                          str_detect(str_to_upper(partido_politico), "EH|EUSKO|ARALAR") | 
                            str_detect(str_to_upper(partido_politico), "EH|EUSKO|ARALAR")~ "EH - BILDU",
                          str_detect(str_to_upper(stringi::stri_trans_general(partido_politico, id = "Latin-ASCII")), "MAS PAIS") ~ "MÁS PAÍS",
                          str_detect(str_to_upper(partido_politico), "VOX") ~ "VOX",
                          TRUE ~ "Otros"))

# siglas <- siglas %>% select(denominacion, siglas) %>% distinct()
```


::: {.callout-tip}
## Mario

Explicar el group by.
Repasar el group by.
:::

```{r}
datos_elecciones <- datos_elecciones |> 
  # group_by(fecha, cod_mun) |> # Confirmar que es a este nivel (mriar dims)
  summarise(participacion_1 = sum(participacion_1),
            participacion_1 = sum(participacion_2),
            votos_blancos = sum(votos_blancos),
            votos_nulos = sum(votos_nulos),
            votos_candidaturas = sum(votos_candidaturas),
            votos = sum(votos), .by=c(fecha, cod_mun, numero_mesas, censo, siglas)) |> # optimizar
  ungroup()

# datos_elecciones |> distinct(fecha, cod_mun, numero_mesas, censo) |> dim()
# datos_elecciones |> distinct(fecha, cod_mun) |> dim()
```


Con la estructura final de la tabla datos_elecciones, vemos que no todas las variables están en el formato correcto.

```{r}
str(datos_elecciones, vec.len=3)
```

::: {.callout-warning}
Pulir bien el mutate del formato fecha con `lubridate`.
:::

```{r}
datos_elecciones <- datos_elecciones |>
  mutate(fecha = ym(fecha),
         siglas = as.factor(siglas))
```

```{r}
str(datos_elecciones, give.attr=0, max.level=3, vec.len=3)
```

Base de datos encuestas

-   hagan referencia a elecciones anteriores a 2008

-   que sean a pie de urna

-   que tenga un tamaño muestral inferior a 750 o que sea desconocido

-   que tengan menos de 1 o menos días de trabajo de campo

```{r}
encuestas <- encuestas %>% filter(!date_elec<"2008-01-01" & # descarto que hagan referencia a elecciones anteriores a 2008
                                    !exit_poll & # descarto que sean a pie de urna
                                    (size >= 750 & !is.na(size)) & # descarto que tenga un tamaño muestral inferior a 750 o que sea desconocido
                                    (field_date_to-field_date_from) > 1# descarto que tengan menos de 1 o menos días de trabajo de campo
                                    )

```

De nuevo se considera eliminar aquellas columnas que no aporten información (aquellas que tengan un único valor). También se encuentra columnas con todos los valores sin informar.

```{r}
#| results: hold
cols_sin_informacion <- encuestas %>%
  summarise(across(everything(), n_distinct)) %>% pivot_longer(cols = everything()) %>% 
  filter(value==1) %>% select(name) %>% pull()

encuestas %>% select(all_of(cols_sin_informacion)[1:5]) %>% summary() # todo NA excepto exit_poll que es todo a no pie de urna
# decidir si ponerlo pq es muy grande el output

encuestas <- encuestas %>% select(-all_of(cols_sin_informacion))
```

Se eliminan las columnas: `r cols_sin_informacion`.

-   *type_survey*: valor constante national.

-   *exit_poll*: valor constante TRUE.

-   *UCD, PCE...*: partidos políticos con toda la información a NA.

hacer un tibble con la base encuesta a fin de disminuir columnas

```{r}
encuestas <- encuestas |>
  pivot_longer(cols = -("date_elec":"turnout"),
               names_to = "siglas",
               values_to = "estimacion_votos") |> 
  drop_na(estimacion_votos) 
```

Los datasets finales con los que trabajamos en el análisis son encuestas y datos_elecciones, que son dos tibbles de dimensiones ____ y ___ respectivamente, donde las filas bla bla (meter definición de tibble).

:::{.callout-warning}
Elegir el output de los heads.
:::

::: columns
::: {.column width="50%"}

```{r}
head(encuestas)
```

:::

::: {.column width="50%"}


```{r}
head(datos_elecciones)
```

:::
:::

```{r}
head(encuestas)
```

```{r}
head(datos_elecciones)
```

Ya que cod_mun ya hemos añadido su información a datos_elecciones y siglas hemos descartado su utilidad.

::: {.border}
This content can be styled with a border
:::

::: {.callout-warnings}
Borrar el chunk export para la entrega.
:::

```{r export}
write.csv(datos_elecciones, file = "./datos/datos_elecciones_final.csv", row.names = FALSE)
write.csv(encuestas, file = "./datos/encuestas_final.csv", row.names = FALSE)
```

```{r}

```

## Análisis


